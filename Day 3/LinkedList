üìå What is a LinkedList?
A LinkedList is a linear data structure where each element (called a node) contains:
Data (value of the element)
A reference (link/pointer) to the next node in the sequence.

In doubly linked lists, each node has a pointer to both the next and previous node.
üß† When and Why Use LinkedList?
‚úÖ Use When:
Frequent insertions/deletions at the beginning or middle of the list.
Memory allocation needs to be dynamic (not fixed like arrays).
You don‚Äôt need frequent random access (like getting an element at index i).
‚ùå Avoid When:
You need fast access by index.
You need less memory usage (linked lists require more memory per node for pointers).
‚úÖ Advantages of LinkedList
Dynamic size: No need to define a fixed size like arrays.
Efficient insertions/deletions: Especially at the beginning or middle.
No memory wastage: Allocated as needed.
‚ùå Disadvantages of LinkedList
Slow access: O(n) time to access an element at a specific index.
More memory usage: Each node stores a pointer along with data.
No random access like arrays.
‚öôÔ∏è Operations on LinkedList (Manually Explained)
Let‚Äôs define a singly linked list and go over key operations.

1. addFirst(value)
Adds node at beginning.
Time complexity: O(1)

2. addLast(value)
Adds node at end.
Time complexity: O(n)

3. removeFirst()
Removes head node.
Time complexity: O(1)

4. removeLast()
Removes last node.
Time complexity: O(n)

5. search(value)
Traverse to find node.
Time complexity: O(n)

6. get(index)
Traverse to index.
Time complexity: O(n)

üõ†Ô∏è Manual Implementation of LinkedList in Java
// Node class
class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}
// LinkedList class
class MyLinkedList {
    Node head;
    // Add element at the beginning
    public void addFirst(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Add element at the end
    public void addLast(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // Remove first node
    public void removeFirst() {
        if (head == null) return;
        head = head.next;
    }

    // Remove last node
    public void removeLast() {
        if (head == null || head.next == null) {
            head = null;
            return;
        }
        Node current = head;
        while (current.next.next != null) {
            current = current.next;
        }
        current.next = null;
    }

    // Print the list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
}


‚úÖ Using Java‚Äôs Built-in LinkedList (from java.util)
import java.util.LinkedList;
public class JavaBuiltInLinkedList {
    public static void main(String[] args) {
        LinkedList<Integer> list = new LinkedList<>();

        // Add elements
        list.add(10);        // adds at end
        list.addFirst(5);    // adds at beginning
        list.addLast(15);    // adds at end

        // Remove elements
        list.removeFirst();  // removes 5
        list.removeLast();   // removes 15

        // Access element
        System.out.println("Element at index 0: " + list.get(0));

        // Print list
        System.out.println("LinkedList: " + list);
    }
}
üßæ Summary Table of Operations (with Time Complexities)
Operation	Manual Code	Java LinkedList	Time Complexity
Add First	addFirst	addFirst()	O(1)
Add Last	addLast	addLast()	O(1) (amortized)
Remove First	removeFirst	removeFirst()	O(1)
Remove Last	removeLast	removeLast()	O(n)
Get by Index	get(index)	get(index)	O(n)
Search Element	Traverse	contains()	O(n)

‚úÖ Time and Space Complexities of LinkedList Operations
Operation	Time Complexity (Singly)	|Time Complexity (Doubly / Java‚Äôs LinkedList)	|Space Complexity per Node
Add First (addFirst)	O(1)	        | O(1)                                        |	O(1)                                 
Add Last (addLast)	O(n)	          | O(1) (Java keeps tail pointer)	            | O(1) 
Remove First	O(1)	                | O(1)	                                      | O(1)
Remove Last	O(n)	                  | O(1)	                                      | O(1)
Search / Contains	O(n)	            | O(n)	                                      | O(1)
Get by Index	O(n)	                | O(n)	                                      | (1)
Insert at Index	O(n)	              | O(n)	                                      | O(1)
Delete at Index	O(n)	              | O(n)	                                      | O(1)
Size (length)	                      |O(n) (if no size tracker)	                  |O(1) (Java tracks size internally)	O(1)
Traverse Entire List	O(n)	        | O(n)	                                      |O(1)

üß† Space Complexity (Overall)
Total space complexity: O(n)
Each node stores:
Singly Linked List: 1 reference (next) ‚Üí space per node = O(1)
Doubly Linked List (Java): 2 references (next + prev) ‚Üí space per node = O(1), but slightly more in practice.
Extra overhead in Java:
Java's LinkedList stores:
Head & tail pointers.
A counter for size.
Each node as an inner class (Node<E> with prev, next, and item fields).

üßæ Summary (Big-O Notation)
Operation	Time Complexity	Space Complexity
Insertion	O(1) at head, O(n) at tail (unless tail is tracked)	O(n)
Deletion	O(1) at head, O(n) at tail or index	O(n)
Access (by index)	O(n)	O(n)
Search	O(n)	O(n)
Traversal	O(n)	O(n)

üîç Notes:
Java‚Äôs LinkedList is a doubly linked list implementation.
Use LinkedList if:
You're frequently inserting/removing elements at the beginning or middle.
Use ArrayList if:
You need fast random access (get(index)).

